#!/bin/bash

# bosh lite installer.
# created by Martin Caarels.
# 2018

# todo:
# check for binaries:[git, bosh, vboxmanage, etc] install or show url when not found.
# list and remove bosh vm's through vboxmanage
# check operating system and manage script accordingly.

# -----------------------------------------------------------------------------------------

# functions
echoblue () {
  printf "\e[34m$1\e[0m"
  echo
}

getSCs () {
  IFS=$'\n'
  for i in $(vboxmanage list vms)
  do
    echo $i | sed 's/ .*//; s/\"//g' | grep -E "^sc-.{8}-.{4}-.{4}-.{4}-.{12}$" > /dev/null
    if [ $? == 0 ]
    then
      echo $i | sed 's/.* //'
    fi
  done
}

getVMs () {
  IFS=$'\n'
  for i in $(vboxmanage list vms)
  do
    echo $i | sed 's/ .*//; s/\"//g' | grep -E "^vm-.{8}-.{4}-.{4}-.{4}-.{12}$" > /dev/null
    if [ $? == 0 ]
    then
      echo $i | sed 's/.* //'
    fi
  done
}

powerOffVM () {
  echoblue "Powering off VM."
  vboxmanage controlvm $1 poweroff > /dev/null
}

deleteVM () {
  echoblue "Deleting VM."
  vboxmanage unregistervm $1 -delete > /dev/null
}



# #############################
# ##                         ##
# ##  Setting up workspace.  ##
# ##                         ##
# #############################

basedir=$(pwd)
workspace="$basedir/workspace"
vbox="$workspace/vbox"
boshdeployment="$workspace/bosh-deployment"
creds="$vbox/creds.yml"



# dirs
if [ -d "$workspace" ]
then
  echoblue "This script will reset your bosh environment and delete all bosh vm's, Press any key to proceed or ctrl+c to abort."
  read -p ""
  # delete old bosh vm's
  for i in $(getVMs)
  do
    echo $i
    powerOffVM $i
    deleteVM $i
  done
  for i in $(getSCs)
  do
    deleteVM $i
  done
  if [ -d "$vbox" ]
  then
    echoblue "Config folder found, cleaning."
    rm -f "$vbox"/*
  else
    echoblue "No config folder found, creating new one."
    mkdir -p "$vbox"
  fi
  if [ -d "$boshdeployment" ]
  then
    echoblue "Updating local bosh deployment repository."
    cd "$boshdeployment"
    git reset --hard
    git pull
  else
    echoblue "No local bosh deployment repository found, cloning a new one."
    cd "$workspace"
    git clone https://github.com/cloudfoundry/bosh-deployment
  fi
else
  echoblue "No prior workspace found, creating new workspace."
  mkdir -p "$vbox"
  cd "$workspace"
  echoblue "Cloning from bosh deployment repository."
  git clone https://github.com/cloudfoundry/bosh-deployment
fi

# cleaning env vars
unset BOSH_ENVIRONMENT
unset BOSH_CLIENT
unset BOSH_CLIENT_SECRET
bosh logout

# ###########################################
# ##                                       ##
# ##  Deploying bosh-lite on virtual-box.  ##
# ##                                       ##
# ###########################################
echoblue "Starting deployment."
bosh logout
cd $workspace

bosh create-env bosh-deployment/bosh.yml \
  --state vbox/state.json \
  -o bosh-deployment/virtualbox/cpi.yml \
  -o bosh-deployment/virtualbox/outbound-network.yml \
  -o bosh-deployment/bosh-lite.yml \
  -o bosh-deployment/bosh-lite-runc.yml \
  -o bosh-deployment/jumpbox-user.yml \
  -o bosh-deployment/uaa.yml \
  -o bosh-deployment/credhub.yml \
  --vars-store $creds \
  -v director_name="Bosh-Lite-Director" \
  -v internal_ip=192.168.50.6 \
  -v internal_gw=192.168.50.1 \
  -v internal_cidr=192.168.50.0/24 \
  -v outbound_network_name=NatNetwork

bosh -e 192.168.50.6 alias-env vbox --ca-cert <(bosh int $creds --path /director_ssl/ca)
printf "\e[92mDeployment successful, please log in to your bosh environment using the following settings:\e[0m\n"
printf "\e[34mCommand:  \e[93mbosh login -e vbox\e[0m\n"
printf "\e[34muser:     \e[93madmin\e[0m\n"
printf "\e[34mpassword: \e[93m$(bosh int $creds --path /admin_password)\e[0m\n"
